name: Cleanup Branch Deployments

on:
  pull_request:
    types:
      - closed

jobs:
  cleanup:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Prepare branch variables
        id: branch
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          if [ -z "$BRANCH" ]; then
            echo "Branch ref missing; skipping cleanup" >> "$GITHUB_STEP_SUMMARY"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | tr '/_' '-' | sed 's/[^a-z0-9-]//g' | cut -c1-50)

          if [ -z "$SAFE_BRANCH" ]; then
            echo "Safe branch slug empty for branch '$BRANCH'; skipping cleanup" >> "$GITHUB_STEP_SUMMARY"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$BRANCH" = "master" ] || [ "$BRANCH" = "main" ]; then
            echo "Branch '$BRANCH' maps to base service; nothing to delete" >> "$GITHUB_STEP_SUMMARY"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Cleaning resources for branch '$BRANCH' (base '${BASE_REF}')" >> "$GITHUB_STEP_SUMMARY"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "safe_branch=$SAFE_BRANCH" >> "$GITHUB_OUTPUT"

      - name: Check required secrets and variables
        if: steps.branch.outputs.skip != 'true'
        run: |
          echo "Checking presence of required secrets/variables..."
          missing=0
          check_required() {
            if [ -z "$1" ]; then
              echo "  $2: MISSING"
              missing=1
            else
              echo "  $2: SET"
            fi
          }
          check_required "${{ secrets.GCP_SA_KEY }}" "GCP_SA_KEY"
          check_required "${{ vars.GCP_PROJECT }}" "GCP_PROJECT"
          check_required "${{ vars.CLOUD_RUN_REGION }}" "CLOUD_RUN_REGION"
          check_required "${{ vars.CLOUD_RUN_SERVICE }}" "CLOUD_RUN_SERVICE"

          echo ""
          if [ "$missing" -ne 0 ]; then
            echo "One or more required secrets/variables are missing. Failing the job."
            exit 1
          fi

      - name: Authenticate to Google Cloud
        if: steps.branch.outputs.skip != 'true'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set project
        if: steps.branch.outputs.skip != 'true'
        run: gcloud config set project ${{ vars.GCP_PROJECT }}

      - name: Configure Docker to use gcloud auth
        if: steps.branch.outputs.skip != 'true'
        run: gcloud auth configure-docker ${{ vars.CLOUD_RUN_REGION }}-docker.pkg.dev --quiet

      - name: Delete branch-specific Cloud Run service
        if: steps.branch.outputs.skip != 'true'
        env:
          SAFE_BRANCH: ${{ steps.branch.outputs.safe_branch }}
          BASE_SERVICE: ${{ vars.CLOUD_RUN_SERVICE }}
          REGION: ${{ vars.CLOUD_RUN_REGION }}
        run: |
          SERVICE_NAME="${BASE_SERVICE}-${SAFE_BRANCH}"
          echo "Deleting Cloud Run service '$SERVICE_NAME' in region '$REGION'"
          gcloud run services delete "$SERVICE_NAME" \
            --region "$REGION" \
            --platform managed \
            --quiet || echo "Service '$SERVICE_NAME' not found; skipping"

      - name: Delete branch-tagged images
        if: steps.branch.outputs.skip != 'true'
        env:
          SAFE_BRANCH: ${{ steps.branch.outputs.safe_branch }}
          REGION: ${{ vars.CLOUD_RUN_REGION }}
          PROJECT: ${{ vars.GCP_PROJECT }}
        run: |
          REPOSITORY="${REGION}-docker.pkg.dev/${PROJECT}/animereco-images"
          IMAGE="${REPOSITORY}/anime-recommendation-backend"
          echo "Searching for image tags in '$IMAGE' with prefix '${SAFE_BRANCH}-'"
          TAGS=$(gcloud artifacts docker tags list "$IMAGE" --location="${REGION}" --format='value(TAG)' 2>/dev/null || true)
          MATCHING_TAGS=$(echo "$TAGS" | grep "^${SAFE_BRANCH}-" || true)

          if [ -z "$MATCHING_TAGS" ]; then
            echo "No branch-tagged images found for '${SAFE_BRANCH}'"
            exit 0
          fi

          echo "Deleting tags:"
          echo "$MATCHING_TAGS"

          while IFS= read -r TAG; do
            if [ -z "$TAG" ]; then
              continue
            fi
            echo "  - Deleting $IMAGE:$TAG"
            gcloud artifacts docker images delete "${IMAGE}:$TAG" --quiet --delete-tags || echo "    Failed to delete tag $TAG"
          done <<< "$MATCHING_TAGS"
